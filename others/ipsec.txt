ユーザーの追加

ルートパスワードの削除 
コレより先は、sudo で仕事をするので、root のパスワードは不要。
従って vipw -s でパスワードを削除する。

root:*:18379:0:99999:7:::

パスワードの第二フィールドはパスワードのハッシュであるが、不要なので、"*"に置き換える。
これは、パスワード認証無効の意味。

# iptables の設定
sudo iptables -A INPUT -i dev lo -j ACCEPT
sudo iptables -A INPUT -p icmp -j ACCEPT
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A INPUT -p esp -j ACCEPT
sudo iptables -A INPUT -p ah -j ACCEPT
sudo iptables -A INPUT -p udp --dport=500 -j ACCEPT   # IKE
sudo iptables -A INPUT -p udp --dport=4500 -j ACCEPT  # IKE nat-traversal 
sudo iptables -A INPUT -p udp --dport=123 -j ACCEPT # ntp 時刻合わせ
sudo iptables -A INPUT -p tcp --dport=123 -j ACCEPT # ntp 時刻合わせ
sudo iptables -A INPUT -p tcp --source 10.0.0.0/24 -j ACCEPT # ipsec vpn 経由でのログイン用
sudo iptables -P INPUT DROP # ssh を通してないので、ssh の場合はここで閉め出されるので注意 最終的にはsshも閉め出す

# 僕は ipv6で接続しているので、この段階でipv4は容赦無くブロックする。

# NTPを通すの忘れると時刻がずれたときによろしくない。
# ssh は VPN経由で入るので、要らない。

# netfilter-persistent (iptables の永続化ツール)
sudo apt install netfilter-persistent 

sudo netfilter-persistent save
以上セーブ

この状態で、conoha の設定で、ipv4 のポートを全て許可に変更する。


# interface の設定
# 今、このホストはグローバルなネットにつながっているのでプライベートアドレスを外側にルーティングしない。
# このために、ルーティングを行う 方法は ifup のスクリプトで行うために /etc/network/interfaces を書き換える
# 意味は interface eth0 が up したときに ip コマンドで静的ルートを追加 down したときに静的ルートを削除
# Linux では ipsec のルーティングは xfrm で行われるので、このルーティングまで到達しない。
# この設定を行う意味は、もしvpn がダウンしている場合はこのルーティングテーブルまで降りてくるので切断が早期に発見できる。また、プライベートアドレスをルータに送出しない等の意味がある。

mit@150-95-198-79:/etc/network$ cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp
        up /bin/ip route add unreachable 10.0.0.0/8
        up /bin/ip route add unreachable 172.16.0.0/12
        up /bin/ip route add unreachable 192.168.0.0/16
        down /bin/ip route del 10.0.0.0/8
        down /bin/ip route del 172.16.0.0/12
        down /bin/ip route del 192.168.0.0/16
auto eth1
iface eth1 inet static
	address 10.0.0.1/24

iface eth0 inet6 dhcp
accept_ra 1

# 今これは、eth1 に conoha の 10.0.0.1/24 の プライベートネットワークを接続する
# conoha はプライベートネットワークに関知しないので staticで設定 

# インターフェースのup は 
sudo ifup eth1 
# で行う。このときに、 ping で 10.0.0.1 10.0.0.2 10.0.1.1 にそれぞれ投げてみていただきたい。
 10.0.0.1 ローカルのインターフェースなので、パケットは帰ってくる
 10.0.0.2 ローカルのネットワークにつながっているはずのIP アドレスなので、プライベートネットワークにパケットが投げられる。しかしそのようなホストはないので返答されない
 10.0.1.1 ローカルのネットワークではないので、ルーティングテーブルを検索して、 ip route add unreachable 10.0.0.0/8 で指定している静的ルートに吸収される。しかしゲートウェイが無い（unreachable) なので、即座に戻る（パケットの送出さえされない。）このために connect: No route to hostが帰ってくる。

mit@150-95-198-79:/etc/network$ sudo ifup eth1
mit@150-95-198-79:/etc/network$ ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 02:01:96:5f:c6:4f brd ff:ff:ff:ff:ff:ff
    inet 150.95.198.79/23 brd 150.95.199.255 scope global dynamic eth0
       valid_lft 86329sec preferred_lft 86329sec
    inet6 2400:8500:1302:848:150:95:198:79/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::1:96ff:fe5f:c64f/64 scope link
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether fa:16:3e:a8:2f:17 brd ff:ff:ff:ff:ff:ff
    inet 10.0.0.1/24 brd 10.0.0.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::f816:3eff:fea8:2f17/64 scope link
       valid_lft forever preferred_lft forever
mit@150-95-198-79:/etc/network$ ping 10.0.0.2
PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
^C
--- 10.0.0.2 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 11ms

mit@150-95-198-79:/etc/network$ ping 10.0.0.1
PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.
64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=0.039 ms
64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=0.040 ms
^C
--- 10.0.0.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 23ms
rtt min/avg/max/mdev = 0.039/0.039/0.040/0.006 ms
mit@150-95-198-79:/etc/network$ ping 10.0.2.1
connect: No route to host


# 下準備終了

# strongswan の設定
# strongswan-swanctl は charon-systemd が依存しているのでここで入る。
sudo apt install charon-systemd libcharon-extra-plugins

charon-systemd ： 本体
libcharon-extra-plugins ：プラグイン MacOS で IKE v1 事前共有鍵を使う場合に XAUTH を使いたいのでそのプラグイン

設定ファイルを書く

mit@150-95-198-79:/etc/swanctl/conf.d$ more wakewakame.conf
connections {
    ikev1-psk-xauth {
      version = 1
      proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-ecp521,aes192-sha256-modp3072,default
      rekey_time = 0s
      pools = primary-pool-ipv4

      fragmentation = yes
      dpd_delay = 30s
      dpd_timeout = 90s

      remote_addrs = %any
      local_addrs = 150.95.198.79
      local-1 {
         auth = psk
      }
      remote-1 {
         auth = psk
      }

      remote-2 {
          auth = xauth
      }

      children {
            ikev1-psk-xauth {
                local_ts = 0.0.0.0/0,::/0
                rekey_time = 0s
                dpd_action = clear
                esp_proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-modp3072,aes192-sha256-ecp256-modp3072,default
            }
      }
      proposals = aes128-sha256-x25519,default
   }
}

pools {
    primary-pool-ipv4 {
        addrs = 10.0.0.100-10.0.0.200
        dns = 8.8.8.8
    }
}

secrets {
   ike-1{
      secret = AAAAAAAAAAAAAAAAAAAAAAAAAA
   }
   eap-wakewakame {
      id = BBBBBBBBBBBBBBBBBBBBBBBBBBBB
      secret = CCCCCCCCCCCCCCCCCCCCCC
   }
}
mit@150-95-198-79:/etc/swanctl/conf.d$

- pools セクション
 IP アドレスをプールしておいてその場で割り当てる
 dns 本来は、内部用のDNS につなげる だけども、ここでは、面倒臭いので、8.8.8.8 のGoogleのDNSを借用

- secrets セクション
事前共有鍵は IKE-1 の secretセクション
eap-[id] はユーザ名とパスワード

これでmacOS からつながるようになったのでテスト
図1 10.0.0.1 に導通確認

とりあえずは以上。


Windows から認証が通らない時 EAP 
libcharon-extra-plugins を入れてないと認証が通らない
！ ハマりポイントです。




